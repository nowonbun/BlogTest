<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:taxo="http://purl.org/rss/1.0/modules/taxonomy/" xmlns:activity="http://activitystrea.ms/spec/1.0/" ><channel><title>明月の開発ストーリ</title><link>https://nowonbun.github.io/BlogTest</link><description>Test</description><language>ja</language><pubDate>Thu, 11 Jul 2019 19:48:19 +0900</pubDate><generator>nowonbun@gmail.com</generator><managingEditor>nowonbun@gmail.com</managingEditor><webMaster>nowonbun@gmail.com</webMaster><item><title>test</title><link>https://nowonbun.github.io/BlogTest/3.html</link><description><![CDATA[hello worldghajahaahaahaa]]></description><category>Study / C#</category><author>nowonbun@gmail.com</author><guid>https://nowonbun.github.io/BlogTest/3.html</guid><pubDate>Fri, 5 Jul 2019 07:21:43 +0900</pubDate></item><item><title>TEST</title><link>https://nowonbun.github.io/BlogTest/2.html</link><description><![CDATA[]]></description><category>Devlopment note / C, C++, MFC</category><author>nowonbun@gmail.com</author><guid>https://nowonbun.github.io/BlogTest/2.html</guid><pubDate>Wed, 3 Jul 2019 07:37:55 +0900</pubDate></item><item><title>TEST</title><link>https://nowonbun.github.io/BlogTest/1.html</link><description><![CDATA[こんにちは。明月です。今日はdelegate(デリゲート)について勉強しましょう。前に筆者がoop(オブジェクト指向プログラム)について説明したことがあります。oopの特徴はカプセル、継承、抽象、ポリモーフィズムによってクラス単位でデータを扱う方法です。そのことによってプログラムを設計する時に何のデータを受け取ってどんな処理するし、どんな結果あるいはデータを出力する流れを作成するのができます。oopの概念はオブジェクトの流れとしては定義していますが処理する方法には定義してないです。それで一から最後まで流れを決めてプログラミングするのでプログラムの性能が制限的になるし並列処理の実装が難しくなります。そのため、最近のプログラム言語のパラダイムは関数型のプログラムになりました。関数型のプログラムの理論は昔からありましたが、実装が難しい短所でよく使えませんでしだが、最近は関数型言語も誕生したし、方法でも前より発展してc#にも「.net framework3.0」が文法から並立処理、匿名メソッド、lamdaが追加されました。それで今日はc#の関数型のプログラムの初めの「delegate」について勉強します。「delegate」のキーワードは初期c#モデルからも使えますが、匿名メソッド、lamda式は「.net framework 3.0」から使用できます。delegate「delegate」は意味とおりに代理子です。すなわち、メソッドの抽象だと思えば理解しやすいと思いますが、メソッドを「delegate」を利用して一つのタイプに変換して呼び出す方法です。 class クラス名{ アクセス修飾子 delegate データタイプ デリゲート名(パラメタ);} ﻿using system;using system.collections.generic;using system.linq;using system.text;using system.threading.tasks;namespace delegateex{    class delegateex    {        //デリゲート        private delegate void testdelegate(string data);        private list list = new list();        //デリゲートと形]]></description><category>Devlopment note / C, C++, MFC</category><author>nowonbun@gmail.com</author><guid>https://nowonbun.github.io/BlogTest/1.html</guid><pubDate>Tue, 25 Jun 2019 20:54:42 +0900</pubDate></item></channel></rss>